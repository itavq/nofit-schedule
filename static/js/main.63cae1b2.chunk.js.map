{"version":3,"sources":["logo.svg","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiKey","discoveryDocs","spreadsheetId","getData","setData","window","gapi","client","load","sheets","spreadsheets","values","batchGet","config","ranges","then","response","data","parseData","result","valueRanges","console","error","log","rowList","days","daysArr","hoursList","dayList","lessons","dayIdx","length","day","push","rowIdx","time","name","who","find","l","shift","label","map","val","i","indexOf","hours","schedule","App","useState","setWho","useEffect","init","initGapiClient","className","value","onChange","e","target","border","cellPadding","cellSpacing","key","hour","lesson","inWho","includes","parseInt","Object","keys","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.63cae1b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default {\n  apiKey: \"AIzaSyC2qP-fbbvdZAmVaHs1pQ2iy5sZKsOCddc\",\n  discoveryDocs:\n    [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n  spreadsheetId: \"16VadQQcgc4YeHW_AKlaaO0Z9u9yEsho9P4EiLfoncfs\"\n};\n","import React, { useEffect, useState } from 'react';\nimport config from './config';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst initGapiClient = (setData) => {\n  // 2. Initialize the JavaScript client library.\n  window.gapi.client\n    .init({\n      apiKey: config.apiKey,\n      discoveryDocs: config.discoveryDocs,\n    })\n    .then(() => {\n      // 3. Initialize and make the API request.\n      getData(setData);\n    });\n};\n\nconst getData = (setData) => {\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\n    window.gapi.client.sheets.spreadsheets.values\n      .batchGet({\n        spreadsheetId: config.spreadsheetId,\n        // majorDimension: 'COLUMNS',\n        ranges: [\"'מערכת'!B2:H\", \"'תכנים'!A1:E\"]\n      })\n      .then(\n        response => {\n          const data = parseData(response.result.valueRanges);\n          setData(data);\n        },\n        response => {\n          console.error(response.result.error);\n        }\n      );\n  });\n}\n\nconst parseData = (data) => {\n  console.log(data);\n  const rowList = data[0].values;\n  const days = data[0].values[0];\n  const daysArr = [];\n  const hoursList = [];\n  const dayList = [];\n  const lessons = {};\n  for (let dayIdx = 1; dayIdx < days.length; dayIdx++) {\n    const day = days[dayIdx];\n    dayList.push(day);\n    for (let rowIdx = 1; rowIdx < rowList.length; rowIdx++) {\n      const time = rowList[rowIdx][0];\n      const name = rowList[rowIdx][dayIdx];\n      if (name && !lessons[name]) {\n        const who = data[1].values.find(l => l[0] === name);\n        console.log(who);\n        if (who) {\n          who.shift();\n          lessons[name] = {\n            label: name,\n            who: who.map((val, i) => val === 'TRUE' ? i + 1 : false)\n          }\n        }\n      }\n      if (hoursList.indexOf(time) === -1) hoursList.push(time);\n      daysArr[day] = daysArr[day] ? daysArr[day] : [];\n      daysArr[day][time] = daysArr[day][time] ? daysArr[day][time] : [];\n      daysArr[day][time].push(name);\n    }\n  }\n  return {\n    days: dayList,\n    hours: hoursList,\n    lessons: lessons,\n    schedule: daysArr\n  };\n}\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [who, setWho] = useState(0);\n\n  useEffect(() => {\n    window.gapi.load(\"client\", () => initGapiClient(setData))\n  }, []);\n\n  const handleChange = (e) => {\n    setWho(e.target.value);\n  }\n\n  console.log(data);\n  console.log(who);\n\n  return (\n    <div className=\"App container\">\n      {data && (\n        <div className=\"selector\">\n          <span>שיעורים מתאימים ל:</span>\n          <select value={who} onChange={handleChange}>\n            <option value=\"0\" >כולם</option>\n            <option value=\"1\" >א</option>\n            <option value=\"2\" >ב</option>\n            <option value=\"3\" >ג</option>\n            <option value=\"4\" >ד</option>\n          </select>\n        </div>\n      )}\n      {data ? (\n        <table border='0' cellPadding='0' cellSpacing='0'>\n          <thead>\n            <tr className=\"days\">\n              <th></th>\n              {data.days.map(day => (\n                <th key={day}>{day}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {data.hours.map(hour => (\n              <tr key={hour}>\n                <td className=\"time\">{hour}</td>\n                {data.days.map(day => (\n                  <td key={day}>\n                    {data.schedule[day][hour].map(lesson => {\n                      const inWho = data.lessons[lesson] && data.lessons[lesson].who.includes(parseInt(who)) ? true : false;\n                      return parseInt(who) === 0 || inWho ? (\n                        <div key={lesson} className={'lesson color-' + (Object.keys(data.lessons).indexOf(lesson) % 6)}>\n                          {/* {console.log(data.lessons[lesson])} */}\n                          {lesson}\n                        </div>\n                      ) : null\n                    })}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}